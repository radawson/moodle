{"version":3,"file":"send_resource.min.js","sources":["../../src/moodlenet/send_resource.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A module to handle Share operations of the MoodleNet.\n *\n * @module     core/moodlenet/send_resource\n * @copyright  2023 Huong Nguyen <huongnv13@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.2\n */\n\nimport Config from 'core/config';\nimport ModalFactory from 'core/modal_factory';\nimport {alert as displayAlert, addNotification, exception as displayException} from 'core/notification';\nimport {getString} from 'core/str';\nimport Prefetch from \"core/prefetch\";\nimport * as Templates from 'core/templates';\nimport * as MoodleNetService from 'core/moodlenet/service';\nimport SendActivityModal from 'core/moodlenet/send_activity_modal';\n\nconst TYPE_ACTIVITY = \"activity\";\nconst TYPE_COURSE = \"course\";\n\nlet listenersRegistered = false;\nlet currentModal;\nlet siteSupportUrl;\nlet issuerId;\nlet courseId;\nlet resourceId;\nlet shareFormat;\nlet type;\n\n/**\n * Handle send to MoodleNet.\n *\n * @param {int} issuerId The OAuth 2 issuer ID.\n * @param {int} resourceId The resource ID, it can be a course or an activity.\n * @param {int} shareFormat The share format.\n */\nconst sendToMoodleNet = (issuerId, resourceId, shareFormat) => {\n    const $modal = currentModal.getModal();\n    const modal = $modal[0];\n    modal.querySelector('.modal-header').classList.remove('no-border');\n    modal.querySelector('.modal-header').classList.add('no-header-text');\n\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_packaging', {}));\n    currentModal.hideFooter();\n\n    let infoPromise;\n    if (type === TYPE_ACTIVITY) {\n        infoPromise = MoodleNetService.sendActivity(issuerId, resourceId, shareFormat);\n    } else if (type === TYPE_COURSE) {\n        infoPromise = MoodleNetService.sendCourse(issuerId, resourceId, shareFormat);\n    }\n    infoPromise.then(async(data) => {\n        const status = data.status;\n        const resourceUrl = data.resourceurl;\n        return responseFromMoodleNet(status, resourceUrl);\n    }).catch(displayException);\n};\n\n/**\n * Handle response from MoodleNet.\n *\n * @param {boolean} status Response status. True if successful.\n * @param {String} resourceUrl Resource URL.\n */\nconst responseFromMoodleNet = (status, resourceUrl = '') => {\n    const $modal = currentModal.getModal();\n    const modal = $modal[0];\n    modal.querySelector('.modal-header').classList.add('no-border');\n    currentModal.setBody(Templates.render('core/moodlenet/send_activity_modal_done', {\n        success: status,\n        sitesupporturl: siteSupportUrl,\n    }));\n\n    if (status) {\n        currentModal.setFooter(Templates.render('core/moodlenet/send_activity_modal_footer_view', {\n            resourseurl: resourceUrl,\n        }));\n        currentModal.showFooter();\n    }\n};\n\n/**\n * Handle authorization with MoodleNet server.\n *\n * @param {int} issuerId The OAuth 2 issuer ID.\n * @return {promise}\n */\nconst handleAuthorization = (issuerId) => {\n    const windowsizewidth = 550;\n    const windowsizeheight = 550;\n\n    // Check if the user is authorized with MoodleNet or not.\n    return MoodleNetService.authorizationCheck(issuerId, courseId).then(async(data) => {\n        if (!data.status) {\n            // Not yet authorized.\n            // Declare moodleNetAuthorize variable, so we can call it later in the callback.\n            window.moodleNetAuthorize = (error, errorDescription) => {\n                // This will be called by the callback after the authorization is successful.\n                if (error === '') {\n                    handleAuthorization(issuerId);\n                } else if (error !== 'access_denied') {\n                    displayAlert(\n                        'Authorization error',\n                        'Error: ' + error + '<br><br>Error description: ' + errorDescription,\n                        'Cancel'\n                    );\n                }\n            };\n            // Open the login url of the OAuth 2 issuer for user to login into MoodleNet and authorize.\n            return window.open(data.loginurl, 'moodlenet_auth',\n                `location=0,status=0,width=${windowsizewidth},height=${windowsizeheight},scrollbars=yes`);\n        } else {\n            // Already authorized.\n            return sendToMoodleNet(issuerId, resourceId, shareFormat);\n        }\n    }).catch(displayException);\n};\n\n/**\n * Render the modal to send resource to MoodleNet.\n *\n * @param {obj} data The data of the resource to be shared.\n * @param {string} shareType The type of the resource to be shared.\n */\nconst renderModal = async(data, shareType) => {\n    if (data.status) {\n        siteSupportUrl = data.supportpageurl;\n        issuerId = data.issuerid;\n        const modalPromise = ModalFactory.create({\n            type: SendActivityModal.TYPE,\n            large: true,\n            templateContext: {\n                'activitytype': data.type,\n                'activityname': data.name,\n                'sharetype': await getString('moodlenet:sharetype' + shareType, 'moodle'),\n                'server': data.server,\n            }\n        });\n        return modalPromise.then(modal => {\n            currentModal = modal;\n            modal.show();\n            return modal;\n        }).catch(displayException);\n    } else {\n        return addNotification({\n            message: data.warnings[0].message,\n            type: 'error'\n        });\n    }\n};\n\n/**\n * Register events.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const shareAction = e.target.closest('[data-action=\"sendtomoodlenet\"]');\n        const sendAction = e.target.closest('.moodlenet-action-buttons [data-action=\"share\"]');\n        if (shareAction) {\n            e.preventDefault();\n            type = shareAction.getAttribute('data-type');\n            const shareType = shareAction.getAttribute('data-sharetype');\n            const resourceId = Config.contextInstanceId;\n\n            let infoPromise;\n            if (type === TYPE_ACTIVITY) {\n                infoPromise = MoodleNetService.getActivityInformation(resourceId);\n            } else if (type === TYPE_COURSE) {\n                infoPromise = MoodleNetService.getCourseInformation(resourceId);\n            }\n            infoPromise.then(async(data) => {\n                renderModal(data, shareType).catch(displayException);\n            }).catch(displayException);\n        }\n\n        if (sendAction) {\n            e.preventDefault();\n            courseId = Config.courseId;\n            resourceId = Config.contextInstanceId;\n            shareFormat = 0;\n            handleAuthorization(issuerId);\n        }\n    });\n};\n\n/**\n * Initialize.\n */\nexport const init = () => {\n    if (!listenersRegistered) {\n        Prefetch.prefetchTemplates([\n            'core/moodlenet/send_activity_modal_base',\n            'core/moodlenet/send_activity_modal_packaging',\n            'core/moodlenet/send_activity_modal_done',\n            'core/moodlenet/send_activity_modal_footer_view',\n        ]);\n        registerEventListeners();\n        listenersRegistered = true;\n    }\n};\n"],"names":["currentModal","siteSupportUrl","issuerId","courseId","resourceId","shareFormat","type","listenersRegistered","responseFromMoodleNet","status","resourceUrl","$modal","getModal","modal","querySelector","classList","add","setBody","Templates","render","success","sitesupporturl","setFooter","resourseurl","showFooter","handleAuthorization","MoodleNetService","authorizationCheck","then","async","data","infoPromise","remove","hideFooter","sendActivity","sendCourse","resourceurl","catch","displayException","sendToMoodleNet","window","moodleNetAuthorize","error","errorDescription","open","loginurl","registerEventListeners","document","addEventListener","e","shareAction","target","closest","sendAction","preventDefault","getAttribute","shareType","Config","contextInstanceId","getActivityInformation","getCourseInformation","supportpageurl","issuerid","ModalFactory","create","SendActivityModal","TYPE","large","templateContext","name","server","show","message","warnings","renderModal","prefetchTemplates"],"mappings":";;;;;;;;0YAqCIA,aACAC,eACAC,SACAC,SACAC,WACAC,YACAC,KAPAC,qBAAsB,QA4CpBC,sBAAwB,SAACC,YAAQC,mEAAc,SAC3CC,OAASX,aAAaY,WACtBC,MAAQF,OAAO,GACrBE,MAAMC,cAAc,iBAAiBC,UAAUC,IAAI,aACnDhB,aAAaiB,QAAQC,UAAUC,OAAO,0CAA2C,CAC7EC,QAASX,OACTY,eAAgBpB,kBAGhBQ,SACAT,aAAasB,UAAUJ,UAAUC,OAAO,iDAAkD,CACtFI,YAAab,eAEjBV,aAAawB,eAUfC,oBAAuBvB,UAKlBwB,iBAAiBC,mBAAmBzB,SAAUC,UAAUyB,MAAKC,MAAAA,MAC3DC,KAAKrB,OAzDM,EAACP,SAAUE,WAAYC,qBAErCQ,MADSb,aAAaY,WACP,OAOjBmB,YANJlB,MAAMC,cAAc,iBAAiBC,UAAUiB,OAAO,aACtDnB,MAAMC,cAAc,iBAAiBC,UAAUC,IAAI,kBAEnDhB,aAAaiB,QAAQC,UAAUC,OAAO,+CAAgD,KACtFnB,aAAaiC,aA1BK,aA6Bd3B,KACAyB,YAAcL,iBAAiBQ,aAAahC,SAAUE,WAAYC,aA7BtD,WA8BLC,OACPyB,YAAcL,iBAAiBS,WAAWjC,SAAUE,WAAYC,cAEpE0B,YAAYH,MAAKC,MAAAA,aACPpB,OAASqB,KAAKrB,OACdC,YAAcoB,KAAKM,mBAClB5B,sBAAsBC,OAAQC,gBACtC2B,MAAMC,0BA0DMC,CAAgBrC,SAAUE,WAAYC,cAjB7CmC,OAAOC,mBAAqB,CAACC,MAAOC,oBAElB,KAAVD,MACAjB,oBAAoBvB,UACH,kBAAVwC,+BAEH,sBACA,UAAYA,MAAQ,8BAAgCC,iBACpD,WAKLH,OAAOI,KAAKd,KAAKe,SAAU,qDArBlB,uBACC,2BA0BtBR,MAAMC,yBAuCPQ,uBAAyB,KAC3BC,SAASC,iBAAiB,SAASC,UACzBC,YAAcD,EAAEE,OAAOC,QAAQ,mCAC/BC,WAAaJ,EAAEE,OAAOC,QAAQ,sDAChCF,YAAa,CACbD,EAAEK,iBACFhD,KAAO4C,YAAYK,aAAa,mBAC1BC,UAAYN,YAAYK,aAAa,kBACrCnD,WAAaqD,gBAAOC,sBAEtB3B,YAnJM,aAoJNzB,KACAyB,YAAcL,iBAAiBiC,uBAAuBvD,YApJlD,WAqJGE,OACPyB,YAAcL,iBAAiBkC,qBAAqBxD,aAExD2B,YAAYH,MAAKC,MAAAA,OA9CTA,OAAMC,KAAM0B,gBACxB1B,KAAKrB,cACLR,eAAiB6B,KAAK+B,eACtB3D,SAAW4B,KAAKgC,SACKC,uBAAaC,OAAO,CACrC1D,KAAM2D,6BAAkBC,KACxBC,OAAO,EACPC,gBAAiB,cACGtC,KAAKxB,kBACLwB,KAAKuC,qBACF,kBAAU,sBAAwBb,UAAW,iBACtD1B,KAAKwC,UAGH1C,MAAKf,QACrBb,aAAea,MACfA,MAAM0D,OACC1D,SACRwB,MAAMC,gCAEF,iCAAgB,CACnBkC,QAAS1C,KAAK2C,SAAS,GAAGD,QAC1BlE,KAAM,WAyBFoE,CAAY5C,KAAM0B,WAAWnB,MAAMC,4BACpCD,MAAMC,yBAGTe,aACAJ,EAAEK,iBACFnD,SAAWsD,gBAAOtD,SAClBC,WAAaqD,gBAAOC,kBACpBrD,YAAc,EACdoB,oBAAoBvB,6BAQZ,KACXK,wCACQoE,kBAAkB,CACvB,0CACA,+CACA,0CACA,mDAEJ7B,yBACAvC,qBAAsB"}